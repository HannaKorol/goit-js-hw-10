{"version":3,"file":"commonHelpers2.js","sources":["../src/js/2-snackbar.js"],"sourcesContent":["//відображення спливаючого повідомлення - бібліотека\nimport iziToast from \"izitoast\";\n//відображення спливаючого повідомлення - імпорт стилів\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n\nconst form = document.querySelector(\".form\")                  // витягуємо форму в JS\nform.addEventListener(\"submit\", function handleSubmit (e) {   // Прослуховуємо форму\n    e.preventDefault();                                       // Запобігаємо стандартній дії форми\n\n\nconst delay = Number(form.delay.value)          // Отримуємо значення затримки як рядок та перетворюємо його в число\nconst state = form.state.value                               // Отримуємо значення стану як рядок\n\n\n\n// Створюємо новий об'єкт Promise\nconst promise = new Promise ((resolve, reject) => { \n//Використовуємо setTimeout для затримки виконання коду всередині функції на вказану кількість мілісекунд, що визначена змінною delay.\n    setTimeout(()=>                                    \n    {\n      if (state === \"fulfilled\") {     //якщо state дорівнює \"fulfilled\" то умова виконата, а якщо \"rejected\" то відхилена\n        resolve(delay);                         \n      } else {\n        reject(delay);\n      }\n    }, delay);                         //значення затримки введеним користувачем в полі форми \n});\n\n\n//^ Оброблюємо promise\n    promise\n    .then((delay) => {                                              //*Використовуємо метод then якщо операція пройшла успішно\n      console.log(`✅ Fulfilled promise in ${delay}ms`);           // Виводимо повідомлення про успішне виконання обіцянки в консоль\n      iziToast.success({                                           //Використання бібліотеки iziToast для відображення спливаючого повідомлення про успіх\n          title: 'Success',\n          message: `✅ Fulfilled promise in ${delay}ms`,\n          position: 'topRight',\n      });\n    })\n    .catch((delay) => {                                           //*Використовуємо метод catch якщо операція пройшла невдало\n      console.log(`❌ Rejected promise in ${delay}ms`);           // Виводимо повідомлення про відхилення обіцянки в консоль\n      iziToast.error({                                            //Використання бібліотеки iziToast для відображення спливаючого повідомлення про помилку\n          title: 'Error',\n          message: `❌ Rejected promise in ${delay}ms`,\n          position: 'topRight',\n        });\n    });\n});\n\n"],"names":["form","e","delay","state","resolve","reject","iziToast"],"mappings":"oFAMA,MAAMA,EAAO,SAAS,cAAc,OAAO,EAC3CA,EAAK,iBAAiB,SAAU,SAAuBC,EAAG,CACtDA,EAAE,eAAc,EAGpB,MAAMC,EAAQ,OAAOF,EAAK,MAAM,KAAK,EAC/BG,EAAQH,EAAK,MAAM,MAKT,IAAI,QAAS,CAACI,EAASC,IAAW,CAE9C,WAAW,IACX,CACMF,IAAU,YACZC,EAAQF,CAAK,EAEbG,EAAOH,CAAK,CAEf,EAAEA,CAAK,CACZ,CAAC,EAKI,KAAMA,GAAU,CACf,QAAQ,IAAI,0BAA0BA,CAAK,IAAI,EAC/CI,EAAS,QAAQ,CACb,MAAO,UACP,QAAS,0BAA0BJ,CAAK,KACxC,SAAU,UACpB,CAAO,CACP,CAAK,EACA,MAAOA,GAAU,CAChB,QAAQ,IAAI,yBAAyBA,CAAK,IAAI,EAC9CI,EAAS,MAAM,CACX,MAAO,QACP,QAAS,yBAAyBJ,CAAK,KACvC,SAAU,UACpB,CAAS,CACT,CAAK,CACL,CAAC"}