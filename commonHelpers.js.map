{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["// Календар бібліотека\nimport flatpickr from \"flatpickr\";\n// Календар бібліотека - імпорт стилів\nimport \"flatpickr/dist/flatpickr.min.css\";\n\n// Alert бібліотека\nimport iziToast from \"izitoast\";\n// Alert бібліотека - імпорт стилів\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n\n\nconst inputEl = document.querySelector(\"#datetime-picker\");\nconst button = document.querySelector(\"button[data-start]\");\n\n\nlet userSelectedDate;\nlet countInterval;     \n\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n        userSelectedDate = selectedDates[0];\n        const currentDate = new Date();\nif (inputEl.value === ''|| userSelectedDate < currentDate) {   //якщо input порожній і вибрана дата користувачем меньша за сьогоднішню, то:\n    button.disabled = true;                                    // кнопка не працює\n    iziToast.error({                                           // використовуємо бібліотеку щоб відобразити alert\n        position: 'topRight',\n        messageColor: 'white',\n        backgroundColor: 'red',\n        message: 'Please choose a date in the future'\n    })\n} else {                                                       //якщо input не порожній і вибрана дата користувачем більша за теперішню\nbutton.disabled = false;                                      // кнопка працює\n}\n    },\n};\n\nflatpickr(inputEl, options)                     // !виклик функції має бути після функції - ця фун. є бібліотекою яка приймає параментер \"кнопка\" і умову вище\n\n\n//Додаємо ще один нуль перед числом для того щоб показувало 00:00:00:00\n//Приймає число -> перетворює його в рядок -> і додає в початок \"0\" якщо число меньше 2-х знаків\nfunction addLeadingZero(value) {\n    return value.toString().padStart(2, \"0\");\n}\n\n\n//Конвертація мілісекундів в дні, години, хвилини та секунди\nfunction convertMs(ms) {\n    // Кількість мілісекунд в одній одиниці часу\n    const second = 1000;                // 1 секунда = 1000 мілісекунд\n    const minute = second * 60;         // 1 хвилина = 60 секунд\n    const hour = minute * 60;           // 1 година = 60 хвилин\n    const day = hour * 24;              // 1 день = 24 години\n  \n // Обчислення днів\n    const days = Math.floor(ms / day);            // Кількість повних днів\n // Обчислення годин\n    const hours = Math.floor((ms % day) / hour); // Залишок годин після обчислення днів\n// Обчислення хвилин\n    const minutes = Math.floor(((ms % day) % hour) / minute); // Залишок хвилин після обчислення годин\n    // Обчислення секунд\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second); // Залишок секунд після обчислення хвилин\n  \n    return { days, hours, minutes, seconds };\n  }\n  console.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\n  console.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\n  console.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}\n  \n\n\n// Функція для оновлення відображення таймера\nfunction updateTimer(days, hours, minutes, seconds) {\n  document.querySelector(\"span.value[data-days]\").textContent = addLeadingZero(days);     // Знаходимо елемент з атрибутом data-days та оновлюємо його текстовий вміст, додавши провідний нуль, якщо потрібно\n  document.querySelector(\"span.value[data-hours]\").textContent = addLeadingZero(hours);   // Знаходимо елемент з атрибутом data-hours та оновлюємо його текстовий вміст, додавши провідний нуль, якщо потрібно\n  document.querySelector(\"span.value[data-minutes]\").textContent = addLeadingZero(minutes);  // Знаходимо елемент з атрибутом data-minutes та оновлюємо його текстовий вміст, додавши провідний нуль, якщо потрібно\n  document.querySelector(\"span.value[data-seconds]\").textContent = addLeadingZero(seconds);  // Знаходимо елемент з атрибутом data-seconds та оновлюємо його текстовий вміст, додавши провідний нуль, якщо потрібно\n};\n\n\n//^   Функція для запуску таймера\n\nfunction startTimer() {\n// Вимикаємо кнопку, щоб користувач не міг натискати її під час таймера\n    button.disabled = true;\n\n    // Встановлюємо інтервал, який буде виконуватися кожну секунду\n    countInterval = setInterval(() => {\n\n// Отримуємо поточний час у мілісекундах\n    const now = Date.now();\n\n// Обчислюємо різницю між вибраною датою та поточним часом\n    const difference = userSelectedDate.getTime() - now;\n\n// Якщо різниця менша або дорівнює нулю (таймер закінчився або вже пройшов)\n    if(difference <= 0) {\n\n// Очищаємо інтервал, щоб припинити оновлення таймера\n        clearInterval(countInterval);\n\n// Включаємо кнопку знову, дозволяючи користувачеві натискати її\n        button.disabled = false;\n\n// Відображаємо повідомлення про завершення таймера за допомогою iziToast\n        iziToast.show({\n            title: 'Time is up!',\n            message: 'The countdown has reached zero.',\n            color: 'green',\n            position: 'topCenter'\n        });\n\n// Виходимо з функції, оскільки таймер закінчився\n        return;\n    }\n\n// Перетворюємо залишок часу в дні, години, хвилини та секунди\n const { days, hours, minutes, seconds  } = convertMs(difference);\n\n// Оновлюємо відображення таймера на сторінці\n updateTimer(days, hours, minutes, seconds);\n}, 1000); // Інтервал в 1000 мілісекунд (1 секунда)\n    }\n\n    // Додаємо обробник подій на кнопку з атрибутом data-start\ndocument.querySelector(\"[data-start]\").addEventListener(\"click\", startTimer);\n\n\n\n\n\n\n\n"],"names":["inputEl","button","userSelectedDate","countInterval","options","selectedDates","currentDate","iziToast","flatpickr","addLeadingZero","value","convertMs","ms","days","hours","minutes","seconds","updateTimer","startTimer","now","difference"],"mappings":"2FAYA,MAAMA,EAAU,SAAS,cAAc,kBAAkB,EACnDC,EAAS,SAAS,cAAc,oBAAoB,EAG1D,IAAIC,EACAC,EAEJ,MAAMC,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACnBH,EAAmBG,EAAc,CAAC,EAClC,MAAMC,EAAc,IAAI,KAC5BN,EAAQ,QAAU,IAAKE,EAAmBI,GAC1CL,EAAO,SAAW,GAClBM,EAAS,MAAM,CACX,SAAU,WACV,aAAc,QACd,gBAAiB,MACjB,QAAS,oCACjB,CAAK,GAELN,EAAO,SAAW,EAEb,CACL,EAEAO,EAAUR,EAASI,CAAO,EAK1B,SAASK,EAAeC,EAAO,CAC3B,OAAOA,EAAM,SAAU,EAAC,SAAS,EAAG,GAAG,CAC3C,CAIA,SAASC,EAAUC,EAAI,CAQnB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACvC,CACD,QAAQ,IAAIL,EAAU,GAAI,CAAC,EAC3B,QAAQ,IAAIA,EAAU,IAAM,CAAC,EAC7B,QAAQ,IAAIA,EAAU,MAAQ,CAAC,EAKjC,SAASM,EAAYJ,EAAMC,EAAOC,EAASC,EAAS,CAClD,SAAS,cAAc,uBAAuB,EAAE,YAAcP,EAAeI,CAAI,EACjF,SAAS,cAAc,wBAAwB,EAAE,YAAcJ,EAAeK,CAAK,EACnF,SAAS,cAAc,0BAA0B,EAAE,YAAcL,EAAeM,CAAO,EACvF,SAAS,cAAc,0BAA0B,EAAE,YAAcN,EAAeO,CAAO,CACzF,CAKA,SAASE,GAAa,CAElBjB,EAAO,SAAW,GAGlBE,EAAgB,YAAY,IAAM,CAGlC,MAAMgB,EAAM,KAAK,MAGXC,EAAalB,EAAiB,QAAO,EAAKiB,EAGhD,GAAGC,GAAc,EAAG,CAGhB,cAAcjB,CAAa,EAG3BF,EAAO,SAAW,GAGlBM,EAAS,KAAK,CACV,MAAO,cACP,QAAS,kCACT,MAAO,QACP,SAAU,WACtB,CAAS,EAGD,MACH,CAGJ,KAAM,CAAE,KAAAM,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAaL,EAAUS,CAAU,EAG/DH,EAAYJ,EAAMC,EAAOC,EAASC,CAAO,CAC1C,EAAG,GAAI,CACF,CAGL,SAAS,cAAc,cAAc,EAAE,iBAAiB,QAASE,CAAU"}